#pragma once

#include "Library/Scene/Scene.h"

class StageSceneStateWorldMap;
class StageSceneStateShop;
class StageSceneStateSnapShot;
class StageSceneStateGetShine;
class StageSceneStateGetShineMain;
class StageSceneStateGetShineGrand;
class StageSceneStateCollectBgm;
class StageSceneStateCollectionList;
class StageSceneStateMiniGameRanking;
class StageSceneStatePauseMenu;
class StageSceneStateCloset;
class StageSceneStateSkipDemo;
class StageSceneStateCheckpointWarp;
class StageSceneStateCarryMeat;
class StageSceneStateTimeBalloon;
class StageSceneStateTitleLogo;
class StageSceneStateMiss;
class StageSceneStateYukimaruRace;
class StageSceneStateYukimaruRaceTutorial;
class StageSceneStateRaceManRace;
class StageSceneStateRadicon;
class StageSceneStateScenarioCamera;
class StageSceneStateRecoverLife;
class StageSceneStateGetShineMainSandWorld;
class StageSceneStateTalk;
class StageSceneStateWarp;
class StageSceneStateWorldIntroCamera;
class ScenarioStartCameraHolder;
class PlayGuideSkip;
class CinemaCaption;
class StageSceneLayout;
class ControllerGuideSnapShotCtrl;
class InputSeparator;
class LocationNameCtrl;
class MiniGameMenu;
class MapLayout;
class CollectionList;
class TimeBalloonNpc;
class ProjectItemDirector;
class Pyramid;
class OpeningStageStartDemo;
class SceneAudioSystemPauseController;
class DemoSoundSynchronizer;
class ProjectSeNamedList;
class TimeBalloonDirector;
class TimeBalloonSequenceInfo;
class CollectBgmPlayer;
class CollectBgmRegister;
class BgmAnimeSyncDirector;
class NpcEventDirector;
class ProjectNfpDirector;
class HelpAmiiboDirector;
class GameDataHolder;

namespace al {
class PlacementInfo;
class WipeSimple;
class WipeHolder;
class LiveActorGroup;
class LiveActor;
class ParabolicPath;
class LayoutTextureRenderer;
class DemoSyncedEventKeeper;
class SimpleLayoutAppearWaitEnd;
class WindowConfirm;
class CameraTicket;
class SimpleAudioUser;
class HtmlViewer;
class ChromakeyDrawer;
}  // namespace al

class StageScene : public al::Scene {
public:
    sead::FixedSafeString<64> mStageName;
    int mScenarioNo = 0;
    StageSceneStateWorldMap* mStateWorldMap = nullptr;
    StageSceneStateShop* mStateShop = nullptr;
    StageSceneStateSnapShot* mStateSnapShot = nullptr;
    StageSceneStateGetShine* mStateGetShine = nullptr;
    StageSceneStateGetShineMain* mStateGetShineMain = nullptr;
    StageSceneStateGetShineGrand* mStateGetShineGrand = nullptr;
    StageSceneStateCollectBgm* mStateCollectBgm = nullptr;
    StageSceneStateCollectionList* mStateCollectionList = nullptr;
    StageSceneStateMiniGameRanking* mStateMiniGameRanking = nullptr;
    StageSceneStatePauseMenu* mStagePauseMenu = nullptr;
    StageSceneStateCloset* mStateCloset = nullptr;
    StageSceneStateSkipDemo* mStateSkipDemo = nullptr;
    StageSceneStateCheckpointWarp* mStateCheckpointWarp = nullptr;
    StageSceneStateCarryMeat* mStateCarryMeat = nullptr;
    StageSceneStateTimeBalloon* mStateTimeBalloon = nullptr;
    StageSceneStateTitleLogo* mStateTitleLogo = nullptr;
    StageSceneStateMiss* mStateMiss = nullptr;
    StageSceneStateYukimaruRace* mStateYukimaruRace = nullptr;
    StageSceneStateYukimaruRaceTutorial* mStateYukimaruRaceTutorial = nullptr;
    StageSceneStateRaceManRace* mStateRaceManRace = nullptr;
    StageSceneStateRadicon* mStateRadicon = nullptr;
    StageSceneStateScenarioCamera* mStateScenarioCamera = nullptr;
    StageSceneStateRecoverLife* mStateRecoverLife = nullptr;
    StageSceneStateGetShineMainSandWorld* mStateGetShineMainSandWorld = nullptr;
    StageSceneStateTalk* mStateTalk = nullptr;
    StageSceneStateWarp* mStateWarp = nullptr;
    StageSceneStateWorldIntroCamera* mStateWorldIntroCamera = nullptr;
    ScenarioStartCameraHolder* mScenarioStartCameraHolder = nullptr;
    sead::FixedSafeString<64> mCostumeName;
    sead::FixedSafeString<64> mCapTypeName;
    void* unused_2c4 = nullptr;
    //Can't be a non pointer GameDataHolderAccessor because there's no default ctor and this classes ctor doesn't initialize it
    GameDataHolder* mGameDataHolder = nullptr;
    al::PlacementInfo* mPlacementInfo  = nullptr;
    al::LayoutTextureRenderer* mLayoutTextureRenderer = nullptr;
    PlayGuideSkip* mPlayGuideSkip = nullptr;
    CinemaCaption* mCinemaCaption = nullptr;
    StageSceneLayout* mStageSceneLayout = nullptr;
    bool mIsPlayerHackFukankun = false;
    bool mIsKoopaHackDemo = false;
    al::SimpleLayoutAppearWaitEnd* mScenarioStartLayout = nullptr;
    al::SimpleLayoutAppearWaitEnd* mWorldStartCountryLayout = nullptr;
    al::SimpleLayoutAppearWaitEnd* mWorldStartRegionLayout = nullptr;
    ControllerGuideSnapShotCtrl* mControllerGuideSnapshotCtrl = nullptr;
    InputSeparator* mInputSeparator = nullptr;
    al::WipeSimple* mWipeSimple = nullptr;
    al::WipeHolder* mWipeHolder = nullptr;
    LocationNameCtrl* mLocationNameCtrl = nullptr;
    al::WindowConfirm* mWindowConfirm = nullptr;
    MiniGameMenu* mMiniGameMenu = nullptr;
    bool mIsExistShineOrCoinCollectInStage = false;
    char pad2[7];
    bool mUnusedBool = false;
    void* unused_368  = nullptr;
    MapLayout* mMapLayout = nullptr;
    al::SimpleLayoutAppearWaitEnd* mPauseMenu = nullptr;
    al::LiveActorGroup* mShopGroup = nullptr;
    CollectionList* mCollectionList = nullptr;
    al::LiveActor* mKoopaLv1 = nullptr;
    TimeBalloonNpc* mTimeBalloonNpc = nullptr;
    ProjectItemDirector* mProjectItemDirector = nullptr;
    Pyramid* mPyramid = nullptr;
    OpeningStageStartDemo* mOpeningStageStartDemo = nullptr;
    al::Nerve* mCurrentNerve = nullptr;
    SceneAudioSystemPauseController* mAudioSystemPauseController = nullptr;
    DemoSoundSynchronizer* mSoundSynchronizer = nullptr;
    al::SimpleAudioUser* mStageStartAtmoSe = nullptr;
    al::SimpleAudioUser* mSePlayerArea = nullptr;
    al::SimpleAudioUser* mSnapShotCameraCtrl = nullptr;
    ProjectSeNamedList* mSeNamedList = nullptr;
    void* unused_3f0 = nullptr;
    TimeBalloonDirector* mTimeBalloonDirector = nullptr;
    TimeBalloonSequenceInfo* mTimeBalloonSequenceInfo = nullptr;
    void* unused_408 = nullptr;
    void* pad_410 = nullptr;
    al::CameraTicket* mCheckpointWarpArriveCamera = nullptr;
    sead::Vector3f mCheckpointWarpTargetPos = {.0f, .0f, .0f};
    sead::Vector3f mCheckpointWarpParabolicPathPos = {.0f, .0f, .0f};
    sead::Vector3f* mCheckpointWarpParabolicPathEnd = nullptr;
    al::LiveActor* mCheckpointWarpCapActor = nullptr;
    al::ParabolicPath* mCheckpointWarpParabolicPath = nullptr;
    al::LiveActor* mDemoShine = nullptr;
    al::LiveActor* mDemoDotShine = nullptr;
    CollectBgmPlayer* mCollectBgmPlayer = nullptr;
    void* unused_460 = nullptr;
    CollectBgmRegister* mCollectBgmRegister = nullptr;
    al::DemoSyncedEventKeeper* mDemoSyncedEventKeeper = nullptr;
    BgmAnimeSyncDirector* mBgmAnimeSyncDirector = nullptr;
    const char* mActiveDemoName = nullptr;
    int mDemoSynchronizerTimer = 0;
    bool unused_494 = false;
    bool mUpdateKitAndGraphics = false;
    bool mAlwaysFalse = false;
    al::ChromakeyDrawer* mChromakeyDrawer = nullptr;
    NpcEventDirector* mNpcEventDirector = nullptr;
    al::HtmlViewer* mHtmlViewer = nullptr;
    ProjectNfpDirector* mProjectNfpDirector = nullptr;
    HelpAmiiboDirector* mHelpAmiiboDirector = nullptr;
    void* filler[6];

public:
    StageScene();
    ~StageScene();
    void init(const al::SceneInitInfo& sceneInitInfo);
    void stopCollectBgm();
    bool tryChangeDemo();
    void appear();
    void control();
    bool isIgnoreAddPlayTime() const;
    void kill();
    bool isGetGrandShineAndEnableWipeClose() const;
    bool isGetGrandShine() const;
    bool isVeilEnd() const;
    bool isE3End() const;
    bool isDefeatKoopaLv1() const;
    bool isMissEnd() const;
    bool isHackEnd() const;
    bool isLoadData() const;
    bool isModeSelectEnd() const;
    bool isNewGame() const;
    bool isChangeLanguage() const;
    void getLanguage() const;
    bool isEnableSave() const;
    bool isPause() const;
    void drawMain() const;
    bool isEnableToDrawOddSpace() const;
    void updatePlay();
    void endDemoAndChangeNerve();
    void updateKitListPostAndChangeNextNerve(const al::Nerve*);
    void exeStartStageBgm();
    void exePlay();
    void updateStageSceneLayoutForKoopaHack();
    bool tryChangeSnapShot();
    bool tryStartWarp();
    bool tryChangePause();
    bool tryChangeList();
    void updateStageInfoLayout();
    void endPlay();
    void exeAmiibo();
    void exeMiss();
    void exeSnapShot();
    void exePause();
    void exeDemoStageStart();
    void exeDemoStageStartCapManHeroTalk();
    void exeDemoNormal();
    bool tryAppearDemoLayout();
    void exeDemoNormalBazookaElectric();
    void exeDemoWithPlayer();
    void exeSkipDemo();
    void exeDemoTalk();
    bool tryUpdateAllForFirst();
    void exeDemoWithPlayerUseCoin();
    void exeDemoCountCoin();
    void exeDemoHackStart();
    void exeDemoHackStartFirst();
    void exeDemoCarryMeat();
    void exeDemoTitleLogo();
    void exeDemoShineGet();
    void exeDemoShineMainGet();
    void exeWaitStartWarpForSession();
    void exeDemoShineGrandGet();
    void exeDemoDamageStopPlayer();
    void exeDemoGetLifeMaxUpItem();
    void exeDemoSceneStartPlayerWalk();
    void exeAppearFromWorldWarpHole();
    void exeWaitWarpToCheckpoint();
    void exeWarpToCheckpoint();
    void exeArriveAtCheckpoint();
    void exeWarp();
    void exeDemoWorldIntroCamera();
    void exeDemoPlayerDown();
    void exeDemoScenarioCamera();
    void exeDemoAppearFromHome();
    void exeDemoReturnToHome();
    void exeDemoRiseMapParts();
    void exeDemoRisePyramid();
    void exeDemoShineChipComplete();
    void exeRaceManRace();
    void exeRaceYukimaru();
    void exeRaceYukimaruTutorial();
    void exeRadicon();
    void exeCollectionList();
    void exeShop();
    void exeCloset();
    void exeCollectBgm();
    void exeMiniGameRanking();
    void exeTimeBalloon();
    bool isOpenEndWorldMapWipe() const;
};

class PlayerActorHakoniwa;

namespace rs {
PlayerActorHakoniwa* getPlayerActor(const al::Scene*);
}
